* terminology and conventions for code

 - Use "duration" when describing how long (in microseconds or seconds) a
   tone will last. Don't use length when speaking about how long (in
   microseconds or seconds) a tone will last.

 - Use "sound" when referring to sound devices, sounds systems
   (ALSA/PulseAudio, etc.) or sound outputs (sinks). Don't use "audio" in
   this context.

 - Use "inter-mark-space" when referring to space between Dots and Dashes
   within one character.  Don't use "end-of-mark space".

 - Use "inter-character-space" when referring to space between characters
   within one word. Don't use "end-of-character space".

 - Use "inter-word-space" when referring to space between words. Don't use
   "end-of-word space".

 - Variables of type cw_ret_t, returned by libcw functions, should be called
   "cwret" (or "cwret_<suffix>"). Example:

   cw_ret_t cwret = cw_tq_enqueue_internal(tq, &tone);

 - Variables of type int, returned by ALSA API functions, should be called
   "snd_rv". The "snd" prefix comes from names of ALSA functions and
   highlights the fact that the returned value comes from ALSA (snd)
   API. Example:

   int snd_rv = cw_alsa.snd_pcm_hw_params_set_channels(gen->alsa_data.pcm_handle, hw_params, CW_AUDIO_CHANNELS);
   if (0 != snd_rv) {
           cw_debug_msg (&cw_debug_object, CW_DEBUG_SOUND_SYSTEM, CW_DEBUG_ERROR,
                         MSG_PREFIX "set hw params: can't set number of channels: %s", cw_alsa.snd_strerror(snd_rv));
           return CW_FAILURE;
   }




* Operating systems

** Linux

*** Generic tips
show threads of a process:
ps -p `pidof <process name>`  -T


Emacs tramp mode:
(setq tramp-default-method "ssh")
C-x C-f /remotehost:filename


Get all #defines seen by a compiler
gcc -march=native -dM -E - </dev/null


** FreeBSD

*** Generic tips

Mount a pendrive
mount -t msdosfs /dev/da0s1 /mnt/

*** Binary packages

https://www.freebsd.org/doc/handbook/pkgng-intro.html

**** Upgrade binary packages:
pkg upgrade

**** Audit installed packages for known vulnerabilities:
pkg audit -F

**** Clean up packages:
pkg autoremove
pkg clean
pkg clean -a

**** List installed packages:
pgk info

**** Remove package
pkg remove


*** Source code packages

https://www.freebsd.org/doc/handbook/ports-using.html#ports-upgrading-tools

**** Install portmaster
cd /usr/ports/ports-mgmt/portmaster
make install clean


**** Upgrade all outdated ports
portmaster -a
or in case of errors:
portmaster -af


* Sound systems

** Console

*** FreeBSD

**** beep
Text visible after installing 'beep' package on FreeBSD 12.1:

For PC spearker sound to work you need to be in the operator group and need rw/ permissions to /dev/speaker device.

Load kernel module:
kldload speaker

Add a user to operator group:
pw groupmod operator -m jerry

Uncomment the following lines in /etc/devfs.rules file:
# Allow members of group operator to cat things to the speaker
[speaker=10]
add path 'speaker' mode 0660 group operator

To load these new rules add the following to /etc/rc.conf:
devfs_speaker_ruleset="speaker"

Then restart devfs to load the new rules:
/etc/rc.d/devfs restart


** ALSA
"plughw" device

https://alsa.opensrc.org/Proc_asound_documentation
echo 32 > /proc/asound/card0/pcm0p/sub0/prealloc


** PulseAudio

*** Sinks

List PulseAudio sink names (names that can be passed as values of '-d'
command line switch):

pactl list | grep -A2 'Sink #' | grep 'Name: ' | cut -d" " -f2

*** Stop/start

To kill pulseaudio server and prevent it from re-starting:
emacs ~/.config/pulse/client.conf
autospawn = no
pactl exit (or killall -9 pulseaudio)

To re-start it again:
emacs ~/.config/pulse/client.conf
autospawn = yes
pulseaudio &

*** Valgrind

Testing PulseAudio under valgrind may require setting "VALGRIND=1" env in
command line. See this thread:
https://bugs.freedesktop.org/show_bug.cgi?id=42942

* gdb

** Linux
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`pwd`/src/libcw/.libs
gdb --args ./src/libcw/tests/.libs/libcw_tests -A r -S a

** FreeBSD
setenv LD_LIBRARY_PATH $LD_LIBRARY_PATH:`pwd`/src/libcw/.libs
gdb --args ./src/libcw/tests/.libs/libcw_tests -A r -S a

* performance

** callgring + kcachegrind

export LD_LIBRARY_PATH="/home/acerion/tmp/unixcw/unixcw/src/libcw/.libs"
valgrind --tool=callgrind   ./src/libcw/tests/.libs/libcw_test_all -A k -S a -N test_straight_key
callgrind_annotate --auto=yes callgrind.out.<PID>
kcachegrind


** perf

http://www.brendangregg.com/perf.html

export LD_LIBRARY_PATH="/home/acerion/tmp/unixcw/unixcw/src/libcw/.libs"
perf record --call-graph dwarf -F 200  -g  ./src/libcw/tests/.libs/libcw_test_all -A k -S a -N test_straight_key
# Show data stored in ./perf.data
perf report --stdio
perf report


* build system
autoheader
autoreconf -fvi
libtoolize

* TODO

** Use suseconds_t for duration variables?

** Count ALSA errors in tests framework:
 + write: writei: Input/output error / -5
 + underruns
 + other
This will require propagating them from libcw's ALSA module up to test
framework, but it would help a lot in registering and tracking problems.

** Detect unusually long times when joining generator's thread

Usually it's 2-5 microseconds, anything longer may be a sign of problems.

** Module prefixes of equal length

To improve readability of debug messages, all values of MSG_PREFIX (like
"libcw/gen" or "libcw/alsa") should have the same length.

** Detect missing function definitions
In order to detect libcw function declarations without definitions, write a
code that tries to generate code that calls all libcw public functions. If
definition of any function declared in public header is missing, linking
phase will fail.

Rationale: today I have detected (by sheer luck) that cw_set_debug_flags()
declaration existed in libcw_debug.h, but the function was not defined
anywhere.
